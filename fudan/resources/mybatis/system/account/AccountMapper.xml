<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jy.repository.system.account.AccountDao">
	<!--  com.jy.entity.system.account.Account -->
    <resultMap id="base" type="BaseAccount">
      <id column="ID" jdbcType="VARCHAR" property="accountId"/>
      <association property="loginLog" column="ID" javaType="LoginLog" select="getLoginLogById" />
      <collection  property="poss"     column="ID" ofType="basePos" select="getPoss"/> 
    </resultMap> 
    <resultMap id="LoginLog" type="LoginLog" ></resultMap>
    <resultMap id="ZNodes" type="com.jy.common.utils.tree.entity.ZNodes"></resultMap>
    <resultMap id="basePos" type="BasePos"></resultMap>
    <!-- 防止密码外泄，取消密码列 -->
    <select id="find" resultMap="base" parameterType="BaseAccount">
       SELECT t.id,
       		  t.loginName,
       		  t.password,
       		  t.roleId,
       		  jbr.name as roleName,
       		  t.name,
       		  t.picUrl,
       		  t.email,
       		  t.isValid,
       		  t.createTime,
       		  t.updateTime,
       		  t.skin,
       		  t.description
       		  FROM jy_base_account t 
      LEFT JOIN JY_BASE_ROLE jbr
      ON jbr.id=t.roleId
      WHERE 1=1 
       <if test="loginName != null and loginName!='' ">
        	and t.loginName=#{loginName}
       </if>
       <if test="accountId != null ">
        	and t.id=#{accountId}
       </if> 
    </select> 
    <!--  防止密码外泄，取消密码列 -->
 	<select id="findByPage"  resultMap="base" parameterType="BaseAccount">
      SELECT t.id,
       		  t.loginName,
       		  t.roleId,  
       		  jbr.name as roleName,
       		  t.name,
       		  t.picUrl,
       		  t.email,
       		  t.isValid,
       		  t.createTime,
       		  t.updateTime,
       		  t.skin,
       		  t.description FROM JY_BASE_ACCOUNT t 
      LEFT JOIN JY_BASE_ROLE jbr
      ON jbr.id=t.roleId
      WHERE 1=1 
       <if test="param.loginName != null and param.loginName!='' ">			
        	AND t.loginName LIKE CONCAT('%',#{param.loginName},'%')
       </if>
       <if test="param.keyWord!= null">
        	AND (
        	t.loginName LIKE CONCAT('%',#{param.keyWord},'%')    
        	OR t.name LIKE CONCAT('%',#{param.keyWord},'%')
        	OR t.email LIKE CONCAT('%',#{param.keyWord},'%')
        	)
       </if>
        <if test="param.roleId != null ">
        	AND t.roleId=#{param.roleId}
       </if>  
       <if test="param.isValid != null ">
        	AND t.isValid=#{param.isValid}
       </if>  
        ORDER BY t.createTime desc
    </select>  
    <select id="count"  resultType="int" parameterType="BaseAccount">
       SELECT count(*) FROM jy_base_account t  WHERE 1=1 
    </select>        
 	<insert id="insert"  parameterType="BaseAccount">	
 	<![CDATA[
	INSERT INTO jy_base_account(
	id,loginName,name,password,salt,roleId,skin,email,isValid,createTime,description
	) VALUES (#{accountId},#{loginName},#{name},#{password},#{salt},#{roleId},#{skin},
	#{email},#{isValid},#{createTime},#{description}
	)
	]]>  
	</insert>
	<delete id="delete" parameterType="BaseAccount">
	delete from jy_base_account  
	WHERE id=#{accountId}
	</delete>
	<delete id="deleteBatch" parameterType ="java.util.List">
	DELETE FROM jy_base_account WHERE id in(
		<foreach item="o" collection="list" open="" separator="," close="" >
			#{o.accountId}
		</foreach>
		)
	</delete>
	<update id="update" parameterType="BaseAccount">
		UPDATE jy_base_account <include refid="updateSQL"></include>
		WHERE id=#{accountId}
	</update>
	<sql id="updateSQL">
		<set>
			<if test="name !=null and name !='' ">
				name = #{name},
			</if>
			<if test="email !=null and email !='' ">
				email = #{email},
			</if>
			<if test="isValid !=null">
				isValid = #{isValid},
			</if>
			<if test="roleId !=null and roleId !='' ">
				roleId = #{roleId},
			</if>
			<if test="updateTime !=null ">
				updateTime = #{updateTime},
			</if>
			<if test="picUrl !=null and picUrl !='' ">
				picUrl = #{picUrl},
			</if>
			<if test="description !=null and description !='' ">
				description = #{description},
			</if>
		</set>
	</sql>
    <!-- 这方法能获取密码和盐 -->
    <select id="findFormatByLoginName"  resultMap="base" parameterType="String">
    	<![CDATA[
       SELECT a.* FROM jy_base_account a WHERE 1=1 
       AND a.isvalid='1' 
       AND a.loginname=#{loginName,jdbcType=VARCHAR}
       ]]>  
    </select>
    <!-- 这方法不能能获取密码和盐 -->
    <select id="findAccountById"  resultMap="base" parameterType="String">
       SELECT  t.id,
       		  t.loginName,
       		  t.roleId,
       		  jbr.name as roleName,
       		  t.name,
       		  t.picUrl,
       		  t.email,
       		  t.isValid,
       		  t.createTime,
       		  t.updateTime,
       		  t.skin,
       		  t.description 
       	FROM jy_base_account t 
       	LEFT JOIN JY_BASE_ROLE jbr
        ON jbr.id=t.roleId 
        WHERE t.accountId=#{accountId}
    </select>
   <update id="setSetting" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   skin =#{skin}
		WHERE id=#{accountId}
	</update>
	<select id="getPerData" resultMap="base" parameterType="String" >
		   SELECT t.id,
		   	  t.loginName,
       		  t.roleId,
       		  t.picUrl,
       		  t.name,
       		  t.email,   		  
       		  t.createTime,
       		  t.updateTime,
       		  t.description,
       		  jbr.name as roleName
       		  FROM jy_base_account t 
       	   LEFT JOIN  jy_base_role jbr
       	   ON jbr.id=t.roleId
       	   WHERE t.isValid=1 and t.id=#{accountId} 
	</select>
	<update id="setPerData" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   name =#{name},
			  email =#{email},
			  updateTime =#{updateTime}
		WHERE id=#{accountId}
	</update>
	<update id="setHeadpic" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   picUrl =#{picUrl},
			  updateTime =#{updateTime}
		WHERE id=#{accountId}
	</update>
	<select id="getRoles" resultMap="ZNodes">
		SELECT jbo.id,
			   jbo.pId,
			   jbo.name,
			   'o' as other 
		FROM jy_base_org jbo
		UNION ALL 
		SELECT CONCAT('role',jbr.id) as id,
			   jbr.orgId as pId,
			   jbr.name,
			   'r' as other 
		FROM jy_base_role jbr
	</select>
    <select id="findCountByLoginName" resultType="int">
       SELECT COUNT(*)
       		  FROM jy_base_account t 
       WHERE  t.loginName=#{loginName}
    </select> 
    <update id="resetPwd" parameterType="BaseAccount">
		UPDATE jy_base_account 
		SET   password =#{password}
		WHERE id=#{accountId}
	</update>
	
	<select id="getLoginLogById"  parameterType="string" resultMap="LoginLog">
	SELECT MAX(jbll.loginTime) as loginTime,jbll.loginIP 
	FROM (SELECT t.accountId,t.loginIP,t.loginTime from jy_base_login_log t WHERE t.accountId=#{ID}) jbll
	GROUP BY jbll.accountId
	</select>
	<select id="getPoss"  parameterType="string" resultMap="basePos" >
	  SELECT jbp.* FROM jy_base_account_position jbap 
	  LEFT JOIN jy_base_position jbp
	  ON jbp.id=jbap.posId
	  WHERE jbap.accountId=#{ID}      
	  ORDER BY jbap.posId
    </select>
    
    <!-- 用户名重复检测 -->
    <select id="checkName" parameterType="BaseAccount" resultType="int">
    	select COUNT(*) from jy_base_account where loginName = #{loginName}
    </select>
    
    <!-- 根据邮箱得到用户信息 -->
    <select id="getAccount" parameterType="BaseAccount" resultType="BaseAccount">
    	select * from jy_base_account where email = #{email}
    </select>
    
    <!-- 邮箱检测 -->
    <select id="checkEmail" parameterType="BaseAccount" resultType="int">
    	select COUNT(*) from jy_base_account where email = #{email}
    </select>
    
    <!-- 根据用户id得到用户信息 -->
    <select id="accountInfo" parameterType="BaseAccount" resultType="BaseAccount">
    	 SELECT t.id,
		   	  t.loginName,
       		  t.roleId,
       		  t.picUrl,
       		  t.name,
       		  t.email,  
       		  t.isValid, 		  
       		  t.createTime,
       		  t.updateTime,
       		  t.description,
       		  jbr.loginIP,
       		  jbr.loginTime
       		  FROM jy_base_account t 
       	   LEFT JOIN jy_base_login_log jbr
       	   ON jbr.accountId = t.id
       	   WHERE t.id = #{accountId} ORDER BY loginTime desc limit 1
    </select>
    
    <!-- 根据positionId获取用户信息 -->
    <select id="selectBy" resultType="com.jy.entity.system.account.Account">
    	SELECT jba.* FROM jy_base_account jba, jy_base_account_position jbap 
    	WHERE jba.`id` = jbap.`accountId` AND jbap.`posId` = #{positionId}
    </select>
    
</mapper>