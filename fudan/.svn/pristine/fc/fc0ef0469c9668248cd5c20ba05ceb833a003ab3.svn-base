package com.jy.service.oa.impl.admin;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.entity.oa.Employee;
import com.jy.entity.oa.admin.BookBorRet;
import com.jy.entity.system.account.Account;
import com.jy.repository.oa.EmployeeMapper;
import com.jy.repository.oa.admin.BookBorRetMapper;
import com.jy.repository.oa.admin.BookMapper;
import com.jy.repository.oa.admin.BookSnMapper;
import com.jy.service.oa.admin.BookBorRetService;
import com.jy.task.utils.DateStringUtil;
import com.jy.task.utils.JsonInfo;
import com.jy.task.utils.PageBean;


@Service("bookBorRetService")
public class BookBorRetServiceImpl implements BookBorRetService {

	private BookBorRetMapper bookBorRetMapper;
	private BookMapper bookMapper;
	private BookSnMapper bookSnMapper;
	private EmployeeMapper employeeMapper;

	public EmployeeMapper getEmployeeMapper() {
		return employeeMapper;
	}

	@Autowired
	public void setEmployeeMapper(EmployeeMapper employeeMapper) {
		this.employeeMapper = employeeMapper;
	}

	public BookMapper getBookMapper() {
		return bookMapper;
	}

	@Autowired
	public void setBookMapper(BookMapper bookMapper) {
		this.bookMapper = bookMapper;
	}

	public BookSnMapper getBookSnMapper() {
		return bookSnMapper;
	}

	@Autowired
	public void setBookSnMapper(BookSnMapper bookSnMapper) {
		this.bookSnMapper = bookSnMapper;
	}

	public BookBorRetMapper getBookBorRetMapper() {
		return bookBorRetMapper;
	}

	@Autowired
	public void setBookBorRetMapper(BookBorRetMapper bookBorRetMapper) {
		this.bookBorRetMapper = bookBorRetMapper;
	}

	@Override
	public JsonInfo save(BookBorRet bookBorRet) {
		Account account = AccountShiroUtil.getCurrentUser();
		Employee employee = employeeMapper.selectItSelf(account.getAccountId());
		
		bookBorRet.setBorrowTime(new Date());
		
		bookBorRet.setRegisterName(employee.getFullname());
		//新增借阅记录
		int result = bookBorRetMapper.insert(bookBorRet);
		//书的状态改为：已借出 1, 数量-1
		result = bookSnMapper.updateStatus(bookBorRet.getBorrowIsbn(), (short)1);
		Long bookId = bookSnMapper.selectBookId(bookBorRet.getBookSnId());
		result = bookMapper.updateLeftAmount(bookId);
		JsonInfo info = new JsonInfo();
		if(result > 0) {
			info.setSuccess(true);
		}else {
			info.setSuccess(false);
		}
		return info;
	}

	// 获取记录详细信息
	@Override
	public BookBorRet getInfoBy(Long recordId) {
		BookBorRet bookBorRet = bookBorRetMapper.selectInfoBy(recordId);
		
		bookBorRet.setReturnTime1(DateStringUtil.dateToString3(bookBorRet.getReturnTime()));
		
		return bookBorRet;
	}

	// 修改记录信息
	@Override
	public JsonInfo update(BookBorRet bookBorRet) {
		// 修改记录
		int result = bookBorRetMapper.update(bookBorRet);
		JsonInfo info = new JsonInfo();
		if (result > 0) {
			info.setSuccess(true);
		} else {
			info.setSuccess(false);
		}
		return info;
	}

	// 获取借阅记录列表
	@Override
	public List<BookBorRet> get(String bookName, String borrowIsbn) {
		List<BookBorRet> bookBorRets = bookBorRetMapper.select(bookName,borrowIsbn);
		return bookBorRets;
	}

	//归还图书
	@Override
	public JsonInfo updateLastReturnTime(BookBorRet bookBorRet) {
		bookBorRet.setLastReturnTime(new Date());
		//设置归还时间
		int result = bookBorRetMapper.updateLastReturnTime(bookBorRet);
		//书的状态改为：归还 0, 数量+1
		result = bookSnMapper.updateStatus(bookBorRet.getBorrowIsbn(), (short)0);
		Long bookId = bookSnMapper.selectBookId(bookBorRet.getBookSnId());
		
		result = bookMapper.updateLeftAmountJia(bookId);
		JsonInfo info = new JsonInfo();
		if (result > 0) {
			info.setSuccess(true);
		} else {
			info.setSuccess(false);
		}
		return info;
	}

	// 归还图书列表
	@Override
	public List<BookBorRet> getRet(String bookName, String borrowIsbn) {
		List<BookBorRet> bookBorRets = bookBorRetMapper.selectRet(bookName,borrowIsbn);
		return bookBorRets;
	}

	// 分页借阅列表
	@Override
	public List<BookBorRet> getPageList(PageBean pb, String bookName,
			String borrowIsbn) {
		// 每页行数
		int pageSize = pb.getPageSize();
		// 当前页数
		int currentPage = pb.getCurrentPage();
		
		// 从哪个索引开始查
		int firstIndex = (currentPage-1) * pageSize;
		// 到哪个索引
		int toIndex = currentPage * pageSize;
		
		List<BookBorRet> bookBorRets = bookBorRetMapper.selectBorPageData(firstIndex, toIndex, bookName, borrowIsbn);

		// 设置时间
		for(BookBorRet bookBorRet : bookBorRets) {
			bookBorRet.setBorrowTime1(DateStringUtil.dateToString4(bookBorRet.getBorrowTime()));
			bookBorRet.setReturnTime1(DateStringUtil.dateToString3(bookBorRet.getReturnTime()));
		}
		
		return bookBorRets;
	}

	// 分页归还列表
	@Override
	public List<BookBorRet> getPageRetList(PageBean pb, String bookName,
			String borrowIsbn) {
		// 每页行数
		int pageSize = pb.getPageSize();
		// 当前页数
		int currentPage = pb.getCurrentPage();
		
		// 从哪个索引开始查
		int firstIndex = (currentPage-1) * pageSize;
		// 到哪个索引
		int toIndex = currentPage * pageSize;
		
		List<BookBorRet> bookBorRets = bookBorRetMapper.selectRetPageData(firstIndex, toIndex, bookName, borrowIsbn);

		// 设置时间
		for(BookBorRet bookBorRet : bookBorRets) {
			bookBorRet.setBorrowTime1(DateStringUtil.dateToString4(bookBorRet.getBorrowTime()));
			bookBorRet.setReturnTime1(DateStringUtil.dateToString3(bookBorRet.getReturnTime()));
			bookBorRet.setLastReturnTime1(DateStringUtil.dateToString4(bookBorRet.getLastReturnTime()));
		}
		
		return bookBorRets;
	}
}
