package com.jy.service.oa.impl.hrm;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.entity.oa.Employee;
import com.jy.entity.oa.hrm.EmpProfile;
import com.jy.entity.system.account.Account;
import com.jy.repository.oa.EmployeeMapper;
import com.jy.repository.oa.hrm.EmpProfileMapper;
import com.jy.service.oa.hrm.EmpProfileService;
import com.jy.task.utils.DateStringUtil;
import com.jy.task.utils.JsonInfo;
import com.jy.task.utils.PageBean;


@Service("empProfileService")
public class EmpProfileServiceImpl implements EmpProfileService {

	private EmpProfileMapper empProfileMapper;
	private EmployeeMapper employeeMapper;

	public EmployeeMapper getEmployeeMapper() {
		return employeeMapper;
	}

	@Autowired
	public void setEmployeeMapper(EmployeeMapper employeeMapper) {
		this.employeeMapper = employeeMapper;
	}

	public EmpProfileMapper getEmpProfileMapper() {
		return empProfileMapper;
	}

	@Autowired
	public void setEmpProfileMapper(EmpProfileMapper empProfileMapper) {
		this.empProfileMapper = empProfileMapper;
	}

	// 添加档案信息
	@Override
	public JsonInfo save(EmpProfile empProfile) {
		Account account = AccountShiroUtil.getCurrentUser();
		Employee employee = employeeMapper.selectItSelf(account.getAccountId());
		empProfile.setCreator(employee.getFullname());
		empProfile.setCreatetime(new Date());
		empProfile.setDelFlag(empProfile.getDELETE_FLAG_NOT());
		
		int result = empProfileMapper.insert(empProfile);
		JsonInfo info = new JsonInfo();
		if(result > 0) {
			info.setSuccess(true);
		}else {
			info.setSuccess(false);
		}
		return info;
	}

	// 修改档案信息
	@Override
	public JsonInfo update(EmpProfile empProfile) {
		empProfile.setApprovalStatus(empProfile.getCHECK_FLAG_NONE());
		
		int result = empProfileMapper.update(empProfile);
		JsonInfo info = new JsonInfo();
		if(result > 0) {
			info.setSuccess(true);
		}else {
			info.setSuccess(false);
		}
		return info;
	}

	// 获取档案详细信息
	@Override
	public EmpProfile getInfoBy(Long profileId) {
		EmpProfile empProfile = empProfileMapper.selectInfoBy(profileId);
		
		empProfile.setCreateTime1(DateStringUtil.dateToString3(empProfile.getCreatetime()));
		if(empProfile.getBirthday() != null) {
			empProfile.setBirthday1(DateStringUtil.dateToString3(empProfile.getBirthday()));
		}
		if(empProfile.getStartWorkDate() != null) {
			empProfile.setStartWorkDate1(DateStringUtil.dateToString3(empProfile.getStartWorkDate()));
		}
		if(empProfile.getChecktime() != null) {
			empProfile.setChecktime1(DateStringUtil.dateToString3(empProfile.getChecktime()));
		}
		
		return empProfile;
	}

	// 审核档案信息
	@Override
	public JsonInfo review(EmpProfile empProfile) {
		Account account = AccountShiroUtil.getCurrentUser();
		Employee employee = employeeMapper.selectItSelf(account.getAccountId());
		empProfile.setCheckName(employee.getFullname());
		empProfile.setChecktime(new Date());
		
		int result = empProfileMapper.updateReview(empProfile);
		JsonInfo info = new JsonInfo();
		if(result > 0) {
			info.setSuccess(true);
		}else {
			info.setSuccess(false);
		}
		return info;
	}

	// 批量删除档案
	@Override
	public JsonInfo delete(Long[] profileId) {
		int result = 0;
		for(Long proId: profileId) {
			result = empProfileMapper.delete(proId);
		}
		
		JsonInfo info = new JsonInfo();
		if(result > 0) {
			info.setSuccess(true);
		}else {
			info.setSuccess(false);
		}
		return info;
	}

	// 获取未删除档案列表
	@Override
	public List<EmpProfile> get(String profileNo, String fullname,
			String idCard, Short approvalStatus) {
		List<EmpProfile> emprofiles = empProfileMapper.select(profileNo, fullname, idCard, approvalStatus);
		return emprofiles;
	}

	// 获取已删除档案列表
	@Override
	public List<EmpProfile> getDel(String profileNo, String fullname,
			String idCard, Short approvalStatus) {
		List<EmpProfile> emprofiles = empProfileMapper.selectDel(profileNo, fullname, idCard, approvalStatus);
		return emprofiles;
	}

	// 批量恢复档案
	@Override
	public JsonInfo recovery(Long[] profileId) {
		int result = 0; 
		for(Long proId: profileId) {
			result = empProfileMapper.updateDelFlag(proId);
		}
		
		JsonInfo info = new JsonInfo();
		if(result > 0) {
			info.setSuccess(true);
		}else {
			info.setSuccess(false);
		}
		return info;
	}

	// 未删除档案分页列表
	@Override
	public List<EmpProfile> getPageList(PageBean pb, String profileNo,
			String fullname, String idCard, Short approvalStatus) {
		// 每页行数
		int pageSize = pb.getPageSize();
		// 当前页数
		int currentPage = pb.getCurrentPage();
		// 从哪个索引开始查
		int firstIndex = (currentPage-1) * pageSize;
		// 到哪个索引
		int toIndex = currentPage * pageSize;
		
		List<EmpProfile> emprofiles = empProfileMapper.selectPageData(firstIndex, toIndex, profileNo, fullname, idCard, approvalStatus);
		
		for(EmpProfile ep: emprofiles) {
			ep.setCreateTime1(DateStringUtil.dateToString3(ep.getCreatetime()));
		}
		
		return emprofiles;
	}

	//删除档案分页列表
	@Override
	public List<EmpProfile> getDelPageList(PageBean pb, String profileNo,
			String fullname, String idCard, Short approvalStatus) {
		// 每页行数
		int pageSize = pb.getPageSize();
		// 当前页数
		int currentPage = pb.getCurrentPage();
		// 从哪个索引开始查
		int firstIndex = (currentPage-1) * pageSize;
		// 到哪个索引
		int toIndex = currentPage * pageSize;
		
		List<EmpProfile> emprofiles = empProfileMapper.selectDelPageData(firstIndex, toIndex, profileNo, fullname, idCard, approvalStatus);
		
		for(EmpProfile ep: emprofiles) {
			ep.setCreateTime1(DateStringUtil.dateToString3(ep.getCreatetime()));
		}
		
		return emprofiles;
	}

}
