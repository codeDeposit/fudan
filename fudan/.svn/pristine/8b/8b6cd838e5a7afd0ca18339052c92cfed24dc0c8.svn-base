package com.jy.controller.workflow.online.apply;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.activiti.engine.IdentityService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jy.common.ajax.AjaxRes;
import com.jy.common.utils.base.Const;
import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.controller.base.BaseController;
import com.jy.entity.oa.leave.Leave;
import com.jy.entity.system.account.Account;
import com.jy.entity.system.org.Org;
import com.jy.service.oa.leave.LeaveService;
import com.jy.service.oa.workflow.ApproveService;
import com.jy.service.system.org.RoleService;

/**
 * 申请页面
 * 
 */
@Controller
@RequestMapping(value = "/backstage/workflow/online/apply/")
public class ApplyController extends BaseController<Object> {

	private static final String SECURITY_URL = "/backstage/workflow/online/apply/index";

	@Autowired
	private RuntimeService runtimeService;
	@Autowired
	private IdentityService identityService;
	@Autowired
	private LeaveService leaveService;
	@Autowired
	private RoleService roleService;
	@Autowired
	private TaskService taskService;

	private ApproveService approveService;

	public ApproveService getApproveService() {
		return approveService;
	}

	@Resource(name = "approveService")
	public void setApproveService(ApproveService approveService) {
		this.approveService = approveService;
	}

	public RoleService getRoleService() {
		return roleService;
	}

	public void setRoleService(RoleService roleService) {
		this.roleService = roleService;
	}

	/**
	 * 申请列表
	 */
	@RequestMapping(value = "index")
	public String index(org.springframework.ui.Model model) {
		if (doSecurityIntercept(Const.RESOURCES_TYPE_MENU)) {
			model.addAttribute("permitBtn",
					getPermitBtn(Const.RESOURCES_TYPE_FUNCTION));
			Account account = AccountShiroUtil.getCurrentUser();
			Org org = roleService.getOrgBy(account.getRoleId());
			model.addAttribute("account", account);
			model.addAttribute("org", org);
			return "/system/workflow/online/apply/list";
		}
		return Const.NO_AUTHORIZED_URL;
	}

	/**
	 * 启动流程实例，并提交申请
	 */
	@RequestMapping(value = "start", method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes startWorkflow(Leave leave, String key) {
		AjaxRes ar = getAjaxRes();
		if (ar.setNoAuth(doSecurityIntercept(Const.RESOURCES_TYPE_MENU,SECURITY_URL))) {
			try {
				String currentUserId = AccountShiroUtil.getCurrentUser()
						.getAccountId();
				Map<String, Object> variables = new HashMap<String, Object>();
				variables.put("approver", currentUserId);
				ProcessInstance processInstance = runtimeService
						.startProcessInstanceByKey(key, variables);

				String pId = processInstance.getId();
				leave.setpId(pId);
				leave.setAccount_id(currentUserId);
				leave.setCreateTime(new Date());
				leave.setId(get32UUID());
				leaveService.insert(leave);

				// 办理第一个任务
				variables.clear();
				variables.put("approver", leave.getApprover());
				TaskQuery query = taskService.createTaskQuery();
				query.taskAssignee(leave.getAccount_id());
				query.processInstanceId(pId);
				Task task = query.singleResult();
				taskService.complete(task.getId(), variables);
				ar.setSucceedMsg("流程已启动，流程ID：" + processInstance.getId());
			} catch (Exception e) {
				logger.error(e.toString(), e);
				ar.setFailMsg("启动流程失败");
			} finally {
				identityService.setAuthenticatedUserId(null);
			}
		}
		return ar;
	}
	
}
