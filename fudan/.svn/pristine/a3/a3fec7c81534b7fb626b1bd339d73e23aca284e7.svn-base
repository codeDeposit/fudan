package com.jy.controller.customer;

import com.jy.common.ajax.AjaxRes;
import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.controller.base.BaseController;
import com.jy.entity.customer.Contacts;
import com.jy.entity.system.account.Account;
import com.jy.service.customer.ContactsService;
import com.jy.service.system.org.RoleService;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller("mobileContactsController")
@RequestMapping("mobile/contacts")
public class ContactsMobileController extends BaseController<Object> {
	
	@Resource(name = "contactsService")
	private ContactsService contactsService;
	@Autowired
	public RoleService roleService;
	
	@RequestMapping({"/pList"})
	public String pList(HttpServletRequest request, Model model,Contacts contacts) throws Exception {
		model.addAttribute("contacts",contacts);
		return "mobile/customer/contacts/mobile_contacts_list";
	}
	
	@RequestMapping({"/pAdd"})
	public String pAdd(HttpServletRequest request, Model model,Contacts contacts) throws Exception {
		model.addAttribute("contacts",contacts);
		return "mobile/customer/contacts/mobile_contacts_add";
	}
	
	@RequestMapping({"/pDelete"})
	public String pDelete(HttpServletRequest request, Model model,Contacts contacts) throws Exception {
		model.addAttribute("contacts",contacts);
		return "mobile/customer/contacts/mobile_contacts_delete";
	}
	
	@RequestMapping({"/pDetail"})
	public String pDetail(HttpServletRequest request, Model model,Contacts contacts) throws Exception {
		model.addAttribute("contacts",contacts);
		return "mobile/customer/contacts/mobile_contacts_detail";
	}
	
	@RequestMapping({"/pSearch"})
	public String pSearch(HttpServletRequest request, Model model,Contacts contacts) throws Exception {
		model.addAttribute("contacts",contacts);
		return "mobile/customer/contacts/mobile_contacts_search";
	}
	
	/**
	 * 列表
	 * @param request
	 * @param model
	 * @param contacts
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/list",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes list(HttpServletRequest request, Model model,Contacts contacts) throws Exception {
		boolean mark = false;
		List<Contacts> contactsList = this.contactsService.find(contacts);
		for(int i=0;i<contactsList.size();i++){
			if(contactsList.get(i).getSex().equals("1")){
				contactsList.get(i).setSex("男");
			}else{
				contactsList.get(i).setSex("女");
			}
		}
		//权限判断
		Account currentAccount = AccountShiroUtil.getCurrentUser();
		String orgId = roleService.getOrg(currentAccount.getRoleId()).getId();
		if(orgId.equals("9")){
			mark = true;
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mark", mark);
		map.put("data",contactsList);
		map.put("count",contactsList.size());
		return resMsg(map); 
	}
	
	/**
	 * 添加
	 * @param request
	 * @param contacts
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/add",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes add(HttpServletRequest request,Contacts contacts)throws Exception{		
		int result = contactsService.insert(contacts);
		return resMsg(result); 
	}
	
	/**
	 * 删除
	 * @param request
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/delete",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes delete(HttpServletRequest request,Contacts contacts)throws Exception{		
		int result = contactsService.delete(contacts);
		return resMsg(result); 
	}
	
	/**
	 * 详细
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/detail",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes detail(HttpServletRequest request,Model model,Contacts contacts)throws Exception{		
		String mark = request.getParameter("mark");//按钮判断
		contacts = contactsService.find(contacts).get(0);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("data",contacts);
		map.put("mark",mark);
		return resMsg(map); 
	}
	
	/**
	 * 更新
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/update",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes update(HttpServletRequest request,Model model,Contacts contacts)throws Exception{		
		int result = contactsService.update(contacts);
		return resMsg(result); 
	}
	
}
