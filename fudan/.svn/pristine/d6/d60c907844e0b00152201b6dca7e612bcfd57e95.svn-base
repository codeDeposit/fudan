package com.jy.controller.system.account;


import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.jy.common.ajax.AjaxRes;
import com.jy.common.utils.FileUpload;
import com.jy.common.utils.base.Const;
import com.jy.common.utils.base.MD5;
import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.controller.base.BaseController;
import com.jy.entity.system.account.Account;
import com.jy.service.system.account.AccountService;

@Controller
@RequestMapping("/mobile/account")
public class MobileAccountController extends BaseController<Account>{
	
	@Autowired
	private AccountService accountService;
	
	/**	
	 * 用户注册页面
	 */
	@RequestMapping(value="/register")
	public String registerPage() {
		return "mobile/login/mobile_register";
	}
	
	/**
	 * 用户名重复检测
	 */
	@RequestMapping(value="/checkName", method=RequestMethod.POST)
	@ResponseBody
	public AjaxRes checkName(HttpServletRequest request,Account account){
		AjaxRes ar = getAjaxRes();
		int res = accountService.checkName(account);
		if(res != 0){
			ar.setFailMsg("用户名已注册");
		}else{
			ar.setSucceedMsg("");
		}
		return ar;
	}
	
	/**
	 * 添加
	 * @param o
	 * @return
	 */
	@RequestMapping(value="/addAcount", method=RequestMethod.POST)
	@ResponseBody
	public AjaxRes addAcount(Account o){
		AjaxRes ar = getAjaxRes();
		try {
			o.setAccountId(get32UUID());	
			int res = accountService.insertAccount(o);
			if(res == 1){
				ar.setSucceedMsg("注册成功");
			}else{
				ar.setFailMsg("登录名已存在");	
			}
		} catch (Exception e) {
			logger.error(e.toString(),e);
			ar.setFailMsg(Const.SAVE_FAIL);
		}
		return ar;
	}
	
	/**
	 *邮箱验证
	 */
	@RequestMapping(value="/checkEmail")
	@ResponseBody
	public AjaxRes checkEmail(HttpServletRequest request,Account account){
		AjaxRes ar = getAjaxRes();
		int res = accountService.checkEmail(account.getEmail());//判断邮箱是否为注册邮箱
		if(res == 0){
			ar.setFailMsg("邮箱未注册");
		}else{
			ar.setSucceedMsg("success");
		}
		return ar;
	}
	
	/**
	 * 修改密码 step2
	 */
	@RequestMapping(value="/step2")
	public String step2(HttpServletRequest request,String email,Model model){
		model.addAttribute("email",email);
		return "mobile/login/findpassword2";
	}
	
	/**
	 * 密码重置
	 */
	@RequestMapping(value="/resertPwd", method=RequestMethod.POST)
	@ResponseBody
	public AjaxRes resertPwd(Account o){
		AjaxRes ar = getAjaxRes();
		o.setPassword(o.getPassword());
		accountService.sysResetPwd(o);
		ar.setSucceedMsg("success");
		return ar;
	}
	
	/**
	 * 忘记密码页面
	 * @return
	 */
	@RequestMapping("/findpass")
	public String findPassPage() {
		return "mobile/login/findpassword1";
	}
	
	/**
	 * 忘记密码页面
	 * @return
	 */
	@RequestMapping("/step3")
	public String findPassPage3(String email,Model model) {
		Account account = accountService.getAccount(email);
		String accountId = account.getId();
		model.addAttribute("accountId", accountId);
		return "mobile/login/findpassword3";
	}
	
	/**
	 * 头像上传
	 */
	@RequestMapping(value="/accountModify", method=RequestMethod.POST)
	@ResponseBody
	public AjaxRes accountModify(@RequestParam(value = "picUrl", required = false) MultipartFile picUrl){
		Account account = AccountShiroUtil.getCurrentUser();
		String filePath = "c:\\fudanImage\\account\\" + account.getLoginName();
		String fileName = "";
		//单张照片上传
		if(picUrl != null && !picUrl.isEmpty()){
			FileUpload.fileUp(picUrl, filePath, picUrl.getOriginalFilename().substring(0, picUrl.getOriginalFilename().lastIndexOf(".")));
			fileName = picUrl.getOriginalFilename();
		}
		AjaxRes ar = getAjaxRes();
		account.setPicUrl(fileName);
		accountService.update(account);
		ar.setSucceedMsg("success");
		return ar;
	}
	
	/**
	 * 用户信息更新
	 * @param o
	 * @return
	 */
	@RequestMapping(value="/update", method=RequestMethod.POST)
	@ResponseBody
	public AjaxRes update(Account o){
		Account account = AccountShiroUtil.getCurrentUser();
		AjaxRes ar = getAjaxRes();
		try {
			if(!(o.getName().equals(account.getName())) || !(o.getEmail().equals(account.getEmail()))) {
				o.setUpdateTime(new Date());
				accountService.update(o);
			}
			ar.setSucceedMsg(Const.UPDATE_SUCCEED);
		} catch (Exception e) {
			logger.error(e.toString(),e);
			ar.setFailMsg(Const.UPDATE_FAIL);
		}
		return ar;
	}
	
	/**
	 * 旧密码校验  
	 */
	@RequestMapping(value="/checkOldPwd")
	@ResponseBody
	public AjaxRes checkOldPwd(HttpServletRequest request){
		AjaxRes ar = getAjaxRes();
		String pwd0 = request.getParameter("lPwd0");
		String pwd1 = request.getParameter("lPwd1");
		Account account = AccountShiroUtil.getCurrentUser();
		if(MD5.md5(pwd0).equals(account.getPassword())){
			account.setPassword(pwd1);
			resertPwd(account);
			ar.setSucceedMsg("密码修改成功");
		}else{
			ar.setFailMsg("旧密码错误");
		}
		return ar;
	}
	
}
