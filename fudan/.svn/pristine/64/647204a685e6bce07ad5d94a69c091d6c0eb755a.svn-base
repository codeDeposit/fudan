package com.jy.controller.customer;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jy.common.ajax.AjaxRes;
import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.controller.base.BaseController;
import com.jy.entity.customer.Contract;
import com.jy.entity.customer.Customer;
import com.jy.entity.system.account.Account;
import com.jy.service.customer.ContractService;
import com.jy.service.customer.CustomerServicer;
import com.jy.service.system.org.OrgService;
import com.jy.service.system.org.RoleService;

@Controller("customController")
@RequestMapping({"backstage/customer"})
public class CustomerController extends BaseController<Object>{

	@Resource(name="customerService")
	private CustomerServicer customerService;
	@Resource(name = "contractService")
	private ContractService contractService;
	@Autowired
	public RoleService roleService;
	@Autowired
	public OrgService orgService;
	
	@RequestMapping({"/index"})
	public String index(HttpServletRequest request, Model model) throws Exception {
	   return "system/customer/customer_index";
	}
	
	@RequestMapping({"/list"})
	public String list(HttpServletRequest request, Model model,Customer customer) throws Exception {
		boolean mark = false;
		List<Customer> customerList = this.customerService.find(customer);
		for(int i=0;i<customerList.size();i++){
			double totalPrice = 0;
			double total = 0;
			Contract contract = new Contract();
			contract.setCustomerId(customerList.get(i).getId());
			List<Contract> contractList = contractService.find(contract);
			for(int j=0;j<contractList.size();j++){
				double sum = contractList.get(j).getAmount();
				double sum1 = 0;
				double sum2 = 0;
				double sum3 = 0;
				if(contractList.get(j).getPrice1End() != 0){
					sum1 = contractList.get(j).getPrice1End();
				}
				if(contractList.get(j).getPrice2End() != 0){
					sum2 = contractList.get(j).getPrice2End();
				}
				if(contractList.get(j).getPrice3End() != 0){
					sum3 = contractList.get(j).getPrice3End();
				}
				total += sum - sum1 - sum2 - sum3;
				totalPrice += contractList.get(j).getAmount();
			}
			customerList.get(i).setAmount(total);//应付账款
			customerList.get(i).setTotalPrice(totalPrice);//总帐款
		}
		//权限判断
		Account currentAccount = AccountShiroUtil.getCurrentUser();
		String orgId = roleService.getOrg(currentAccount.getRoleId()).getId();
		if(orgId.equals("9")){
			mark = true;
		}
		model.addAttribute("mark",mark);
		model.addAttribute("list",customerList);
		model.addAttribute("count",customerList.size());
		return "system/customer/customer_list";
	}
	
	/**
	 * 增加
	 * @param model
	 * @return
	 */
	@RequestMapping("/add")  
	@ResponseBody
	public AjaxRes add(HttpServletRequest request,Customer customer)throws Exception{		
		Account currentAccount = AccountShiroUtil.getCurrentUser();
		customer.setUserId(currentAccount.getAccountId());
		AjaxRes ar = getAjaxRes();
		customerService.insert(customer);
		ar.setSucceedMsg("success");
		return ar;
	}
	
	/**
	 * 删除
	 * @param model
	 * @return
	 */
	@RequestMapping("/delete")  
	@ResponseBody
	public AjaxRes delete(HttpServletRequest request,Customer customer)throws Exception{		
		AjaxRes ar = getAjaxRes();
		customerService.delete(customer);
		ar.setSucceedMsg("success");
		return ar;
	}
	
	/**
	 * 详细
	 * @param model
	 * @return
	 */
	@RequestMapping("/detail")  
	public String detail(HttpServletRequest request,Model model,Customer customer)throws Exception{		
		String mark = request.getParameter("mark");//按钮判断
		customer = customerService.find(customer).get(0);
		model.addAttribute("customer",customer);
		model.addAttribute("mark",mark);
		return "system/customer/customer_detail";
	}
	
	/**
	 * 基本信息
	 * @param model
	 * @return
	 */
	@RequestMapping("/basic")  
	public String basic(HttpServletRequest request,Model model,Customer customer)throws Exception{		
		customer = customerService.find(customer).get(0);
		model.addAttribute("customer",customer);
		return "system/customer/customer_basic";
	}
	
	/**
	 * 更新
	 * @param model
	 * @return
	 */
	@RequestMapping("/update")  
	@ResponseBody
	public AjaxRes update(HttpServletRequest request,Model model,Customer customer)throws Exception{		
		AjaxRes ar = getAjaxRes();
		customerService.update(customer);
		ar.setSucceedMsg("success");
		return ar;
	}
	
	/**
	 * 搜索
	 * @param model
	 * @return
	 */
	@RequestMapping("/search")
	public String search(HttpServletRequest request,Model model,Customer customer)throws Exception{		
		boolean mark = false;
		List<Customer> customerList = new ArrayList<Customer>();
		customerList = customerService.search(customer);
		for(int i=0;i<customerList.size();i++){
			double totalPrice = 0;
			double total = 0;
			Contract contract = new Contract();
			contract.setCustomerId(customerList.get(i).getId());
			List<Contract> contractList = contractService.find(contract);
			for(int j=0;j<contractList.size();j++){
				double sum = contractList.get(j).getAmount();
				double sum1 = 0;
				double sum2 = 0;
				double sum3 = 0;
				if(contractList.get(j).getPrice1End() != 0){
					sum1 = contractList.get(j).getPrice1End();
				}
				if(contractList.get(j).getPrice2End() != 0){
					sum2 = contractList.get(j).getPrice2End();
				}
				if(contractList.get(j).getPrice3End() != 0){
					sum3 = contractList.get(j).getPrice3End();
				}
				total += sum - sum1 - sum2 - sum3;
				totalPrice += contractList.get(j).getAmount();
			}
			customerList.get(i).setAmount(total);//应付账款
			customerList.get(i).setTotalPrice(totalPrice);//总帐款
		}
		//权限判断
		Account currentAccount = AccountShiroUtil.getCurrentUser();
		String orgId = roleService.getOrg(currentAccount.getRoleId()).getId();
		if(orgId.equals("9")){
			mark = true;
		}
		model.addAttribute("mark",mark);
		model.addAttribute("list",customerList);
		model.addAttribute("count",customerList.size());
		return "system/customer/customer_list";
	}
	
}
