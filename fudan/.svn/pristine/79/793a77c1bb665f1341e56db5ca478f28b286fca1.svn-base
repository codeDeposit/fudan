package com.jy.controller.customer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jy.common.ajax.AjaxRes;
import com.jy.controller.base.BaseController;
import com.jy.entity.customer.SaleActivity;
import com.jy.entity.system.account.Account;
import com.jy.service.customer.SaleActivityService;
import com.jy.service.system.org.RoleService;
import com.jy.common.utils.FileUpload;
import com.jy.common.utils.security.AccountShiroUtil;

import org.springframework.web.multipart.MultipartFile;

@Controller("mobileSaleActivityController")
@RequestMapping({"mobile/saleActivity"})
public class SaleActivityMobileController extends BaseController<Object>{
	
	@Resource(name="saleActivityService")
	private SaleActivityService saleActivityService;
	@Autowired
	public RoleService roleService;
	
	@RequestMapping({"/pList"})
	public String pList(HttpServletRequest request, Model model,SaleActivity saleActivity) throws Exception {
		model.addAttribute("saleActivity",saleActivity);
		return "mobile/customer/saleActivity/mobile_saleActivity_list";
	}
	
	@RequestMapping({"/pAdd"})
	public String pAdd(HttpServletRequest request, Model model,SaleActivity saleActivity) throws Exception {
		model.addAttribute("saleActivity",saleActivity);
		return "mobile/customer/saleActivity/mobile_saleActivity_add";
	}
	
	@RequestMapping({"/pDelete"})
	public String pDelete(HttpServletRequest request, Model model,SaleActivity saleActivity) throws Exception {
		model.addAttribute("saleActivity",saleActivity);
		return "mobile/customer/saleActivity/mobile_saleActivity_delete";
	}
	
	@RequestMapping({"/pDetail"})
	public String pDetail(HttpServletRequest request, Model model,SaleActivity saleActivity) throws Exception {
		model.addAttribute("saleActivity",saleActivity);
		return "mobile/customer/saleActivity/mobile_saleActivity_detail";
	}
	
	@RequestMapping({"/pSearch"})
	public String pSearch(HttpServletRequest request, Model model,SaleActivity saleActivity) throws Exception {
		model.addAttribute("saleActivity",saleActivity);
		return "mobile/customer/saleActivity/mobile_saleActivity_search";
	}
	
	/**
	 * 列表
	 * @param request
	 * @param model
	 * @param saleActivity
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/list",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes list(HttpServletRequest request, Model model,SaleActivity saleActivity) throws Exception {
		boolean mark = false;
		List<SaleActivity> saleActivityList = this.saleActivityService.find(saleActivity);
		for(int i=0;i<saleActivityList.size();i++){
			if(saleActivityList.get(i).getByway().equals("1")){
				saleActivityList.get(i).setByway("电话拜访");
			}else if(saleActivityList.get(i).getByway().equals("2")){
				saleActivityList.get(i).setByway("现场拜访");
			}else{
				saleActivityList.get(i).setByway("QQ和微信拜访");
			}
			if(saleActivityList.get(i).getLevel().equals("1")){
				saleActivityList.get(i).setLevel("一般");
			}else if(saleActivityList.get(i).getLevel().equals("2")){
				saleActivityList.get(i).setLevel("重要");
			}else{
				saleActivityList.get(i).setLevel("紧急");
			}
		}
		//权限判断
		Account currentAccount = AccountShiroUtil.getCurrentUser();
		String orgId = roleService.getOrg(currentAccount.getRoleId()).getId();
		if(orgId.equals("9")){
			mark = true;
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mark", mark);
		map.put("data",saleActivityList);
		map.put("count",saleActivityList.size());
		return resMsg(map); 
	}
	
	/**
	 * 添加
	 * @param request
	 * @param saleActivity
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/add",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes add(HttpServletRequest request,SaleActivity saleActivity,@RequestParam(value = "attachments", required = false) MultipartFile filePicture){
		String filePath = "c:\\fudanImage\\customer\\saleActivity\\" + saleActivity.getCustomerId();
		String picture = "";	
		if(filePicture != null && !filePicture.isEmpty()){
			FileUpload.fileUp(filePicture, filePath, filePicture.getOriginalFilename().substring(0, filePicture.getOriginalFilename().lastIndexOf(".")));
			picture = filePicture.getOriginalFilename();
		}
		saleActivity.setAttachment(picture);
		int result = saleActivityService.insert(saleActivity);
		return resMsg(result);  
	}
	
	/**
	 * 删除
	 * @param request
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/delete",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes delete(HttpServletRequest request,SaleActivity saleActivity)throws Exception{		
		int result = saleActivityService.delete(saleActivity);
		return resMsg(result);  
	}
	
	/**
	 * 详细
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/detail",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes detail(HttpServletRequest request,Model model,SaleActivity saleActivity)throws Exception{		
		String mark = request.getParameter("mark");//按钮判断
		saleActivity = saleActivityService.find(saleActivity).get(0);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mark", mark);
		map.put("data",saleActivity);
		return resMsg(map);
	}
	
	/**
	 * 更新
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/update",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes update(HttpServletRequest request,Model model,SaleActivity saleActivity,@RequestParam(value = "attachment_sale", required = false) MultipartFile filePicture)throws Exception{		
		String filePath = "c:\\fudanImage\\customer\\saleActivity\\" + saleActivity.getCustomerId();
		String picture = "";	
		if(filePicture != null && !filePicture.isEmpty()){
			FileUpload.fileUp(filePicture, filePath, filePicture.getOriginalFilename().substring(0, filePicture.getOriginalFilename().lastIndexOf(".")));
			picture = filePicture.getOriginalFilename();
		}
		saleActivity.setAttachment(picture);
		int result = saleActivityService.update(saleActivity);
		return resMsg(result);
	}
	
}
