package com.jy.controller.customer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.jy.common.ajax.AjaxRes;
import com.jy.common.utils.FileUpload;
import com.jy.common.utils.security.AccountShiroUtil;
import com.jy.controller.base.BaseController;
import com.jy.entity.customer.Contract;
import com.jy.entity.system.account.Account;
import com.jy.service.customer.ContractService;
import com.jy.service.system.org.RoleService;

@Controller("mobileContractController")
@RequestMapping({ "mobile/contract" })
public class ContractMobileController extends BaseController<Object>{
	
	@Resource(name = "contractService")
	private ContractService contractService;
	@Autowired
	public RoleService roleService;
	
	@RequestMapping({"/pList"})
	public String pList(HttpServletRequest request, Model model,Contract contract) throws Exception {
		model.addAttribute("contract",contract);
		return "mobile/customer/contract/mobile_contract_list";
	}
	
	@RequestMapping({"/pAdd"})
	public String pAdd(HttpServletRequest request, Model model,Contract contract) throws Exception {
		List<Contract> contractList = this.contractService.find(contract);//得到合同数量
		model.addAttribute("count",contractList.size());
		model.addAttribute("contract",contract);
		return "mobile/customer/contract/mobile_contract_add";
	}
	
	@RequestMapping({"/pDelete"})
	public String pDelete(HttpServletRequest request, Model model,Contract contract) throws Exception {
		model.addAttribute("contract",contract);
		return "mobile/customer/contract/mobile_contract_delete";
	}
	
	@RequestMapping({"/pDetail"})
	public String pDetail(HttpServletRequest request, Model model,Contract contract) throws Exception {
		model.addAttribute("contract",contract);
		return "mobile/customer/contract/mobile_contract_detail";
	}
	
	@RequestMapping({"/pSearch"})
	public String pSearch(HttpServletRequest request, Model model,Contract contract) throws Exception {
		model.addAttribute("contract",contract);
		return "mobile/customer/contract/mobile_contract_search";
	}
	
	/**
	 * 列表
	 * @param request
	 * @param model
	 * @param contract
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/list",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes list(HttpServletRequest request, Model model,Contract contract) throws Exception {
		boolean mark = false;
		List<Contract> contractList = this.contractService.find(contract);
		//权限判断
		Account currentAccount = AccountShiroUtil.getCurrentUser();
		String orgId = roleService.getOrg(currentAccount.getRoleId()).getId();
		if(orgId.equals("9")){
			mark = true;
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mark", mark);
		map.put("data",contractList);
		map.put("count",contractList.size());
		return resMsg(map);
	}
	
	/**
	 * 添加
	 * @param request
	 * @param contract
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/add",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes add(HttpServletRequest request,Contract contract,@RequestParam(value = "attachments2", required = false) MultipartFile filePicture){
		String filePath = "c:\\fudanImage\\customer\\contract\\" + contract.getCustomerId();
		String picture = "";	
		if(filePicture != null && !filePicture.isEmpty()){
			FileUpload.fileUp(filePicture, filePath, filePicture.getOriginalFilename().substring(0, filePicture.getOriginalFilename().lastIndexOf(".")));
			picture = filePicture.getOriginalFilename();
		}
		contract.setAttachment(picture);
		int result = contractService.insert(contract);
		return resMsg(result);
	}
	
	/**
	 * 删除
	 * @param request
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/delete",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes delete(HttpServletRequest request,Contract contract)throws Exception{		
		int result = contractService.delete(contract);
		return resMsg(result);
	}
	
	/**
	 * 详细
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/detail",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes detail(HttpServletRequest request,Model model,Contract contract)throws Exception{		
		String mark = request.getParameter("mark");//按钮判断
		contract = contractService.find(contract).get(0);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mark", mark);
		map.put("data",contract);
		return resMsg(map);
	}
	
	/**
	 * 更新
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/update",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes update(HttpServletRequest request,Model model,Contract contract,@RequestParam(value = "attachment_detail", required = false) MultipartFile filePicture)throws Exception{		
		String filePath = "c:\\fudanImage\\customer\\contract\\" + contract.getCustomerId();
		String picture = "";	
		if(filePicture != null && !filePicture.isEmpty()){
			FileUpload.fileUp(filePicture, filePath, filePicture.getOriginalFilename().substring(0, filePicture.getOriginalFilename().lastIndexOf(".")));
			picture = filePicture.getOriginalFilename();
		}
		contract.setAttachment(picture);
		int result = contractService.update(contract);
		return resMsg(result);
	}
	
	/**
	 * 账款详细
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/fundsDetail",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes fundsDetail(HttpServletRequest request,Model model,Contract contract)throws Exception{		
		String mark = request.getParameter("mark");//按钮判断
		contract = contractService.find(contract).get(0);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("mark", mark);
		map.put("data",contract);
		return resMsg(map);
	}
	
	/**
	 * 账款更新
	 * @param request
	 * @param model
	 * @param customer
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/fundsUpdate",method = RequestMethod.POST)
	@ResponseBody
	public AjaxRes fundsUpdate(HttpServletRequest request,Model model,Contract contract)throws Exception{		
		int result = contractService.update(contract);
		return resMsg(result);
	}
	
} 