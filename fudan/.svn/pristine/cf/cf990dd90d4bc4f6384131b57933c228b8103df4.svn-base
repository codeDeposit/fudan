package com.jy.controller.app;

import java.util.List;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import com.jy.common.ajax.AjaxRes;
import com.jy.common.utils.FileUpload;
import com.jy.common.utils.base.Tools;
import com.jy.controller.base.BaseController;
import com.jy.entity.app.admin.Account;
import com.jy.service.app.admin.AppAccountService;

@Controller("appMemberController")
@RequestMapping(value="/appMember")
public class AppAccountController extends BaseController<Object> {
	
	@Resource(name="appAccountService")
	private AppAccountService appAccountService;
	
	@RequestMapping("/add")  
	@ResponseBody
	public AjaxRes add(HttpServletRequest request,Model model,Account account)throws Exception{	
		int res = appAccountService.insert(account);
		return resMsg(res);
	}
	
	@RequestMapping("/avatar")  
	@ResponseBody
	public AjaxRes avatar(HttpServletRequest request,Model model,
			@RequestParam(value = "file", required = false) MultipartFile file,Account account)throws Exception{	
		String filePath = "c:\\image\\account\\" + account.getId();	//图片路径
		String fileName = "";
		AjaxRes ar = getAjaxRes();
		int number = Tools.getRandomNum();
		if (file != null && !file.isEmpty()){
			FileUpload.fileUp(file, filePath,number + file.getOriginalFilename().substring(0, file.getOriginalFilename().lastIndexOf(".")));
			fileName += number + file.getOriginalFilename();
			account.setAvatar(fileName);
		}
		appAccountService.update(account);
		ar.setSucceed(fileName,1);
		return ar;
	}
	
	@RequestMapping("/delete")  
	@ResponseBody
	public AjaxRes delete(HttpServletRequest request,Model model,Account account)throws Exception{	
		int res = appAccountService.delete(account);
		return resMsg(res);
	}
	
	@RequestMapping("/login")  
	@ResponseBody
	public AjaxRes login(HttpServletRequest request,Model model,Account account)throws Exception{	
		Account account2 = new Account();
		account2.setMobile(account.getMobile());
		List<Account> list = appAccountService.find(account2);
		AjaxRes ar = getAjaxRes();
		if(list.size() == 0){//无此用户
			ar.setSucceed(list,3);
		}else{
			List<Account> list2 = appAccountService.find(account);
			if(list2.size() != 0){//登陆成功
				//用户登录记录
				appAccountService.AppLoginPour(account);
				ar.setSucceed(list.get(0),1);
			}else{//密码错误
				ar.setSucceed(list.get(0),2);	
			}
		}
		return ar;
	}
	
	/**
	 * 手机号注册检测
	 * @param request
	 * @param model
	 * @param account
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/phoneEcho")  
	@ResponseBody
	public AjaxRes phoneEcho(HttpServletRequest request,Model model,Account account)throws Exception{	
		AjaxRes ar = getAjaxRes();
		List<Account> list = appAccountService.find(account);
		if(list.size() == 0){//可以注册
			ar.setSucceed(list,1);
		}else{
			ar.setSucceed(list,0);
		}
		return ar;
	}
	
	@RequestMapping("/listPage")  
	public String listPage(HttpServletRequest request,Model model)throws Exception{	
		return "app/admin/account/account_list";
	}

	@RequestMapping("/addPage")  
	public String addPage(HttpServletRequest request,Model model)throws Exception{	
		return "app/admin/account/account_add";
	}
	
	@RequestMapping("/list")  
	@ResponseBody
	public AjaxRes list(HttpServletRequest request,Model model,Account account)throws Exception{	
		AjaxRes ar = getAjaxRes();
		List<Account> list = appAccountService.find(account);
		ar.setSucceed(list, 1);
		return ar;
	}
	
	@RequestMapping("/detail")  
	@ResponseBody
	public AjaxRes detail(HttpServletRequest request,Model model,Account account)throws Exception{	
		AjaxRes ar = getAjaxRes();
		Account account2 = appAccountService.find(account).get(0);
		ar.setSucceed(account2, 1);
		return ar;
	}
	
	@RequestMapping("/update")  
	@ResponseBody
	public AjaxRes update(HttpServletRequest request,Model model,Account account)throws Exception{	
		int res = appAccountService.update(account);
		return resMsg(res);
	}
	
}
